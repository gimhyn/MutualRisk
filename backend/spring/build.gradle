plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.3'
    id 'io.spring.dependency-management' version '1.1.6'
    id "org.sonarqube" version "5.1.0.4882"
    id 'jacoco'
}

jacoco {
    toolVersion = "0.8.12"
}

jacocoTestReport {
    dependsOn test
    reports {
        html.required = true
        xml.required = true
    }

    def QDomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + "*")
    }

    afterEvaluate {
        classDirectories.setFrom(
                files(classDirectories.files.collect {
                    fileTree(dir: it, exclude: [
                            "com/example/mutualrisk/MutualriskApplication*",
                            "com/example/mutualrisk/**/dto/*",
                            "com/example/mutualrisk/**/entity/*",
                            "com/example/mutualrisk/**/controller/*",
                            "com/example/mutualrisk/common/**/*"
                    ] + QDomains)
                })
        )
    }

    finalizedBy jacocoTestCoverageVerification
}

jacocoTestCoverageVerification {
    def QDomains = []

    for (qPattern in '**/QA'..'**/QZ') {
        QDomains.add(qPattern + "*")
    }

    violationRules {
        rule {
            enabled = true
            element = 'CLASS'

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.00
                excludes = [
                        "com.example.mutualrisk",
                        "com.example.mutualrisk.asset.dto.*",
                        "com.example.mutualrisk.asset.entity.*",
                        "com.example.mutualrisk.asset.controller.*",
                        "com.example.mutualrisk.common.*",
                        "com.example.mutualrisk.fund.dto.*",
                        "com.example.mutualrisk.fund.entity.*",
                        "com.example.mutualrisk.fund.controller.*",
                        "com.example.mutualrisk.user.dto.*",
                        "com.example.mutualrisk.user.entity.*",
                        "com.example.mutualrisk.user.controller.*",
                        "com.example.mutualrisk.portfolio.controller.*",
                        "com.example.mutualrisk.portfolio.dto.*",
                        "com.example.mutualrisk.portfolio.entity.*",
                        "com.example.mutualrisk.industry.controller.*",

                ] + QDomains
            }

        }
    }
}


group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.3.0'
    developmentOnly 'org.springframework.boot:spring-boot-devtools'

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation "org.junit.jupiter:junit-jupiter:5.8.1"
    testImplementation 'org.springframework.restdocs:spring-restdocs-mockmvc'

    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'  // 테스트 코드에서 Lombok 사용
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'  // 테스트 코드에서 어노테이션 처리
    testRuntimeOnly 'com.h2database:h2' // 테스트 시 h2사용

    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'

    implementation 'io.jsonwebtoken:jjwt-api:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-impl:0.12.6'
    runtimeOnly 'io.jsonwebtoken:jjwt-jackson:0.12.6'

    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-data-redis
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-redis', version: '3.3.0'
    // https://mvnrepository.com/artifact/org.springframework.boot/spring-boot-starter-validation
    implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: '3.3.0'

    // QueryDSL 추가
    implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'

    annotationProcessor "com.querydsl:querydsl-apt:${dependencyManagement.importedProperties['querydsl.version']}:jakarta"
    annotationProcessor "jakarta.annotation:jakarta.annotation-api"
    annotationProcessor "jakarta.persistence:jakarta.persistence-api"

    // mongoDB 추가
    implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
//     쿼리 파라미터 로그 남기기
//    implementation 'com.github.gavlyukovskiy:p6spy-spring-boot-starter:1.9.0'

    // 이메일 발송을 위한 의존성
    implementation 'org.springframework.boot:spring-boot-starter-mail'

    // https://mvnrepository.com/artifact/com.squareup.okhttp3/mockwebserver
    testImplementation group: 'com.squareup.okhttp3', name: 'mockwebserver', version: '4.12.0'

}

tasks.withType(JavaCompile){
    options.encoding = "UTF-8"
}

tasks.named('test') {
    useJUnitPlatform()

    finalizedBy jacocoTestReport
}

jacocoTestReport.sourceEncoding = 'UTF-8'