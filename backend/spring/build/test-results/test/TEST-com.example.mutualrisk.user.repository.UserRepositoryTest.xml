<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.example.mutualrisk.user.repository.UserRepositoryTest" tests="2" skipped="0" failures="0" errors="0" timestamp="2024-09-24T05:50:51" hostname="DESKTOP-MMCQPV1" time="0.067">
  <properties/>
  <testcase name="유저 id 테스트" classname="com.example.mutualrisk.user.repository.UserRepositoryTest" time="0.013"/>
  <testcase name="사용자의 Oauth id를 사용하여 사용자를 찾을 수 있다" classname="com.example.mutualrisk.user.repository.UserRepositoryTest" time="0.053"/>
  <system-out><![CDATA[2024-09-24T14:50:50.839+09:00  INFO 22860 --- [mutualrisk] [    Test worker] t.c.s.AnnotationConfigContextLoaderUtils : Could not detect default configuration classes for test class [com.example.mutualrisk.user.repository.UserRepositoryTest]: UserRepositoryTest does not declare any static, non-private, non-final, nested classes annotated with @Configuration.
2024-09-24T14:50:50.861+09:00  INFO 22860 --- [mutualrisk] [    Test worker] .b.t.c.SpringBootTestContextBootstrapper : Found @SpringBootConfiguration com.example.mutualrisk.MutualriskApplication for test class com.example.mutualrisk.user.repository.UserRepositoryTest

  .   ____          _            __ _ _
 /\\ / ___'_ __ _ _(_)_ __  __ _ \ \ \ \
( ( )\___ | '_ | '_| | '_ \/ _` | \ \ \ \
 \\/  ___)| |_)| | | | | || (_| |  ) ) ) )
  '  |____| .__|_| |_|_| |_\__, | / / / /
 =========|_|==============|___/=/_/_/_/

 :: Spring Boot ::                (v3.3.3)

2024-09-24T14:50:50.901+09:00  INFO 22860 --- [mutualrisk] [    Test worker] c.e.m.u.repository.UserRepositoryTest    : Starting UserRepositoryTest using Java 17.0.11 with PID 22860 (started by SSAFY in C:\특화프로젝트\새 폴더\S11P21A607\backend\spring)
2024-09-24T14:50:50.902+09:00  INFO 22860 --- [mutualrisk] [    Test worker] c.e.m.u.repository.UserRepositoryTest    : The following 1 profile is active: "test"
2024-09-24T14:50:51.115+09:00  INFO 22860 --- [mutualrisk] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Multiple Spring Data modules found, entering strict repository configuration mode
2024-09-24T14:50:51.116+09:00  INFO 22860 --- [mutualrisk] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Bootstrapping Spring Data JPA repositories in DEFAULT mode.
2024-09-24T14:50:51.191+09:00  INFO 22860 --- [mutualrisk] [    Test worker] .s.d.r.c.RepositoryConfigurationDelegate : Finished Spring Data repository scanning in 72 ms. Found 5 JPA repository interfaces.
2024-09-24T14:50:51.219+09:00  INFO 22860 --- [mutualrisk] [    Test worker] beddedDataSourceBeanFactoryPostProcessor : Replacing 'dataSource' DataSource bean with embedded version
2024-09-24T14:50:51.262+09:00  INFO 22860 --- [mutualrisk] [    Test worker] o.s.j.d.e.EmbeddedDatabaseFactory        : Starting embedded database: url='jdbc:h2:mem:68455d2c-030f-4bb5-a3d6-3cbabfdd9220;DB_CLOSE_DELAY=-1;DB_CLOSE_ON_EXIT=false', username='sa'
2024-09-24T14:50:51.306+09:00  INFO 22860 --- [mutualrisk] [    Test worker] o.hibernate.jpa.internal.util.LogHelper  : HHH000204: Processing PersistenceUnitInfo [name: default]
2024-09-24T14:50:51.314+09:00  INFO 22860 --- [mutualrisk] [    Test worker] o.h.c.internal.RegionFactoryInitiator    : HHH000026: Second-level cache disabled
2024-09-24T14:50:51.338+09:00  INFO 22860 --- [mutualrisk] [    Test worker] o.s.o.j.p.SpringPersistenceUnitInfo      : No LoadTimeWeaver setup: ignoring JPA class transformer
2024-09-24T14:50:51.623+09:00  INFO 22860 --- [mutualrisk] [    Test worker] o.h.e.t.j.p.i.JtaPlatformInitiator       : HHH000489: No JTA platform available (set 'hibernate.transaction.jta.platform' to enable JTA platform integration)
Hibernate: 
    drop table if exists asset cascade 
Hibernate: 
    drop table if exists asset_covariance cascade 
Hibernate: 
    drop table if exists asset_history cascade 
Hibernate: 
    drop table if exists asset_news cascade 
Hibernate: 
    drop table if exists industry cascade 
Hibernate: 
    drop table if exists interest_asset cascade 
Hibernate: 
    drop table if exists member cascade 
Hibernate: 
    drop table if exists news cascade 
Hibernate: 
    drop table if exists portfolio cascade 
Hibernate: 
    drop table if exists recommend_asset cascade 
Hibernate: 
    create table asset (
        expected_return float(53) not null,
        id integer generated by default as identity,
        industry_id integer,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        code varchar(255) not null,
        image_name varchar(255),
        image_path varchar(255),
        name varchar(255) not null,
        region enum ('KR','US'),
        primary key (id)
    )
Hibernate: 
    create table asset_covariance (
        asset_id_1 integer,
        asset_id_2 integer,
        id integer generated by default as identity,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table asset_history (
        asset_id integer,
        date integer,
        id integer generated by default as identity,
        price float(53) not null,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table asset_news (
        asset_id integer,
        id integer generated by default as identity,
        news_id integer,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table industry (
        id integer generated by default as identity,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        name varchar(255),
        primary key (id)
    )
Hibernate: 
    create table interest_asset (
        asset_id integer,
        id integer generated by default as identity,
        status boolean not null,
        user_id integer,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table member (
        id integer generated by default as identity,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        email varchar(255) not null,
        image varchar(255),
        nickname varchar(255),
        oauth_id varchar(255) not null,
        primary key (id)
    )
Hibernate: 
    create table news (
        id integer generated by default as identity,
        status boolean not null,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        content varchar(255),
        link varchar(255),
        title varchar(255),
        primary key (id)
    )
Hibernate: 
    create table portfolio (
        id integer generated by default as identity,
        status boolean not null,
        user_id integer,
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    create table recommend_asset (
        asset_id integer,
        id integer generated by default as identity,
        portfolio_id integer,
        return_diff float(53),
        sharpe_ratio_diff float(53),
        status boolean not null,
        volatility_diff float(53),
        created_at timestamp(6) not null,
        updated_at timestamp(6) not null,
        primary key (id)
    )
Hibernate: 
    alter table if exists asset 
       add constraint FK46jxc0nyems655301g7i71wrt 
       foreign key (industry_id) 
       references industry
Hibernate: 
    alter table if exists asset_covariance 
       add constraint FK7bu2207k3u1ira4bq6fdoslt4 
       foreign key (asset_id_1) 
       references asset
Hibernate: 
    alter table if exists asset_covariance 
       add constraint FKpsk4rdcx7te6h0et5h70kx5rv 
       foreign key (asset_id_2) 
       references asset
Hibernate: 
    alter table if exists asset_history 
       add constraint FK322cepv7u4b2ch4r0g7ciehbj 
       foreign key (asset_id) 
       references asset
Hibernate: 
    alter table if exists asset_news 
       add constraint FKh0xov6t7cr7rsnlq5s4suvsgu 
       foreign key (asset_id) 
       references asset
Hibernate: 
    alter table if exists asset_news 
       add constraint FK9deo320ytw3nm0rv822r5d0s7 
       foreign key (news_id) 
       references news
Hibernate: 
    alter table if exists interest_asset 
       add constraint FKo1lmddp9rt1hg9xxjsouqhstb 
       foreign key (asset_id) 
       references asset
Hibernate: 
    alter table if exists interest_asset 
       add constraint FK3h0xe3uoktj2ohh41ksov1yq0 
       foreign key (user_id) 
       references member
Hibernate: 
    alter table if exists portfolio 
       add constraint FK5wmeb6wjbx1oi2s70y95kanxt 
       foreign key (user_id) 
       references member
Hibernate: 
    alter table if exists recommend_asset 
       add constraint FKj2c3ym96cbp4t2uw5igf37n01 
       foreign key (asset_id) 
       references asset
Hibernate: 
    alter table if exists recommend_asset 
       add constraint FKnvsqs0p5m8a9o6x4nabc9tf9a 
       foreign key (portfolio_id) 
       references portfolio
2024-09-24T14:50:51.652+09:00  INFO 22860 --- [mutualrisk] [    Test worker] j.LocalContainerEntityManagerFactoryBean : Initialized JPA EntityManagerFactory for persistence unit 'default'
2024-09-24T14:50:51.758+09:00  INFO 22860 --- [mutualrisk] [    Test worker] c.e.m.u.repository.UserRepositoryTest    : Started UserRepositoryTest in 0.893 seconds (process running for 22.679)
Hibernate: 
    /* insert for
        com.example.mutualrisk.user.entity.User */insert 
    into
        member (created_at, email, image, nickname, oauth_id, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    /* insert for
        com.example.mutualrisk.user.entity.User */insert 
    into
        member (created_at, email, image, nickname, oauth_id, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    /* insert for
        com.example.mutualrisk.user.entity.User */insert 
    into
        member (created_at, email, image, nickname, oauth_id, status, updated_at, id) 
    values
        (?, ?, ?, ?, ?, ?, ?, default)
Hibernate: 
    /* <criteria> */ select
        u1_0.id,
        u1_0.created_at,
        u1_0.email,
        u1_0.image,
        u1_0.nickname,
        u1_0.oauth_id,
        u1_0.status,
        u1_0.updated_at 
    from
        member u1_0 
    where
        u1_0.oauth_id=?
]]></system-out>
  <system-err><![CDATA[]]></system-err>
</testsuite>
